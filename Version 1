<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Penguins vs Polar Bears ‚Äî Simple</title>
  <style>
    :root{
      --bg:#f3f7fb; --card:#fff; --accent:#3b82f6; --muted:#6b7280;
    }
    html,body{height:100%;margin:0;font-family:system-ui,-apple-system,Segoe UI,Roboto,"Helvetica Neue",Arial;}
    body{background:var(--bg);display:flex;align-items:center;justify-content:center;padding:24px;}
    .app{width:900px;max-width:100%;background:var(--card);border-radius:12px;box-shadow:0 6px 30px rgba(15,23,42,0.08);padding:20px;}
    h1{margin:0 0 8px;font-size:20px}
    p.sub{margin:0 0 16px;color:var(--muted);font-size:13px}
    .row{display:flex;gap:12px;align-items:center}
    .center{justify-content:center}
    .select-grid{display:flex;gap:12px}
    .team-card{flex:1;background:#f9fafb;border:1px solid #e6eef9;border-radius:10px;padding:14px;text-align:center;cursor:pointer;transition:transform .12s,box-shadow .12s}
    .team-card:hover{transform:translateY(-4px);box-shadow:0 6px 18px rgba(59,130,246,0.08)}
    .team-card.disabled{opacity:.45;cursor:not-allowed;transform:none;box-shadow:none}
    .team-emoji{font-size:44px}
    .btn{background:var(--accent);color:white;padding:8px 12px;border-radius:10px;border:0;cursor:pointer}
    .btn.ghost{background:transparent;color:var(--accent);border:1px solid #dbeafe}
    .hp-bar{height:10px;background:#e6eef9;border-radius:12px;overflow:hidden;width:240px}
    .hp-fill{height:100%;background:#ef4444;width:100%;transition:width .25s}
    .panel{background:#fff;border-radius:10px;padding:12px;border:1px solid #eef2ff}
    .moves-grid{display:grid;grid-template-columns:repeat(2,1fr);gap:8px}
    .move-btn{display:flex;justify-content:space-between;align-items:center;padding:8px;border-radius:8px;border:1px solid #eef2ff;background:#f8fbff;cursor:pointer}
    .move-icon{font-size:18px;margin-right:8px}
    .log{max-height:160px;overflow:auto;padding:8px;background:#fbfdff;border-radius:8px;border:1px solid #eef2ff}
    .log-item{font-size:13px;padding:6px;border-radius:6px;background:#fff;margin-bottom:6px;border:1px solid #f1f5f9}
    .muted{color:var(--muted);font-size:13px}
    .winner{background:#fff8e6;border-color:#ffedd5;color:#92400e;padding:12px;border-radius:10px;font-weight:600}
    .small{font-size:12px;color:var(--muted)}
    footer{margin-top:12px;text-align:center;font-size:12px;color:var(--muted)}
  </style>
</head>
<body>
  <div class="app" id="app">
    <h1>Penguins üêß vs Polar Bears üêª‚Äç‚ùÑÔ∏è</h1>
    <p class="sub">Two-player hot-seat ‚Äî choose characters, take turns, and win. Critical hits and elemental chemistry included.</p>

    <!-- Selection -->
    <div id="selectionRoot">
      <div id="selectionStage" class="panel">
        <div id="selectionContent"></div>
      </div>
    </div>

    <!-- Battle -->
    <div id="battleRoot" style="display:none">
      <div style="display:flex;gap:18px;align-items:center;flex-wrap:wrap;margin-bottom:12px">
        <div class="panel" style="flex:1">
          <div class="row">
            <div style="width:64px;text-align:center"><div id="p1Emoji" class="team-emoji">üêß</div></div>
            <div style="flex:1">
              <div id="p1Name" style="font-weight:600">Player 1</div>
              <div class="row" style="align-items:center;gap:10px;margin-top:6px">
                <div class="hp-bar"><div id="p1Fill" class="hp-fill"></div></div>
                <div id="p1HP" class="small">150/150</div>
              </div>
            </div>
          </div>
        </div>

        <div class="panel" style="flex:1;text-align:right">
          <div class="row" style="justify-content:flex-end">
            <div style="flex:1">
              <div id="p2Name" style="font-weight:600">Player 2</div>
              <div class="row" style="justify-content:flex-end;align-items:center;gap:10px;margin-top:6px">
                <div id="p2HP" class="small">150/150</div>
                <div class="hp-bar" style="width:240px"><div id="p2Fill" class="hp-fill"></div></div>
              </div>
            </div>
            <div style="width:64px;text-align:center"><div id="p2Emoji" class="team-emoji">üêª‚Äç‚ùÑÔ∏è</div></div>
          </div>
        </div>
      </div>

      <div id="turnPanel" class="panel" style="margin-bottom:12px">
        <div class="row" style="justify-content:space-between;align-items:center">
          <div><strong id="turnLabel">Penguin's Turn</strong> <span class="small" id="turnEmoji">üêß</span></div>
          <div class="row">
            <button class="btn ghost" id="resetBtn">Back to Selection</button>
            <button class="btn" id="newGameBtn" style="margin-left:8px">Reset Match</button>
          </div>
        </div>
      </div>

      <div style="display:grid;grid-template-columns:1fr 360px;gap:12px">
        <div class="panel">
          <div id="movesTitle"><strong>Available Moves</strong></div>
          <div style="height:10px"></div>
          <div class="moves-grid" id="movesGrid"></div>
        </div>

        <div class="panel">
          <div style="display:flex;justify-content:space-between;align-items:center;margin-bottom:8px">
            <div><strong>Battle Log</strong></div>
            <div class="small muted">latest first</div>
          </div>
          <div class="log" id="log"></div>
        </div>
      </div>

      <div id="endBox" style="margin-top:12px"></div>
    </div>

    <footer>Simple vanilla JS version ‚Äî two-player hot-seat</footer>
  </div>

  <script>
  (function(){
    // --- constants & helpers ---
    const MAX_HP = 150;
    const DAMAGE_SCALE = MAX_HP / 100; // 1.5
    const CRIT_CHANCE = 0.2; // 20%

    const TEAMS = {
      PENGUIN: 'penguin',
      BEAR: 'bear'
    };

    function emojiFor(team){ return team === TEAMS.PENGUIN ? 'üêß' : 'üêª‚Äç‚ùÑÔ∏è'; }
    function clamp(v, a, b){ return Math.max(a, Math.min(b, v)); }
    function rndChance(p){ return Math.random() < p; }

    // Characters (one preset per species, kept simple)
    const CHARACTERS = {
      penguin: {
        id:'penguin',
        team:TEAMS.PENGUIN,
        name:'Penguin',
        hp:MAX_HP,
        moves:[
          {name:'Frost Peck', power: Math.round(6 * DAMAGE_SCALE), element:'Ice', symbol:'‚ùÑÔ∏è'},
          {name:'Aqua Dash', power: Math.round(8 * DAMAGE_SCALE), element:'Water', symbol:'üíß'},
          {name:'Chill Heal', power: Math.round(-5 * DAMAGE_SCALE), element:'Heal', symbol:'‚ú®'},
          {name:'Wind Flap', power: Math.round(6 * DAMAGE_SCALE), element:'Air', symbol:'üí®'}
        ]
      },
      bear: {
        id:'bear',
        team:TEAMS.BEAR,
        name:'Polar Bear',
        hp:MAX_HP,
        moves:[
          {name:'Claw Swipe', power: Math.round(7 * DAMAGE_SCALE), element:'Earth', symbol:'üåç'},
          {name:'Blizzard Roar', power: Math.round(8 * DAMAGE_SCALE), element:'Ice', symbol:'‚ùÑÔ∏è'},
          {name:'Hibernate', power: Math.round(-6 * DAMAGE_SCALE), element:'Heal', symbol:'üí§'},
          {name:'Tundra Smash', power: Math.round(9 * DAMAGE_SCALE), element:'Rock', symbol:'ü™®'}
        ]
      }
    };

    // Elemental advantage mapping and reaction table
    const ELEMENT_ADV = { Ice:'Water', Water:'Rock', Earth:'Air', Rock:'Ice' };
    const REACTIONS = {
      Ice: { Water:'Freeze Reaction ‚Äî extra 2 dmg!', Air:'Frost Storm ‚Äî double-hit!' },
      Water: { Rock:'Erosion ‚Äî +2 dmg!' },
      Earth: { Air:'Dust Burst ‚Äî +1 dmg!' },
      Rock: { Ice:'Crack Chill ‚Äî defense break!' }
    };

    function getReaction(e1,e2){
      if (!e1 || !e2) return null;
      if (REACTIONS[e1] && REACTIONS[e1][e2]) return REACTIONS[e1][e2];
      if (REACTIONS[e2] && REACTIONS[e2][e1]) return REACTIONS[e2][e1];
      return null;
    }

    // --- state ---
    let P1 = null; // object copy of chosen char for player1
    let P2 = null; // player2
    let turn = TEAMS.PENGUIN; // whose turn (team identity used for "turn label")
    let history = [];
    let battleStarted = false;

    // --- dom refs ---
    const selectionRoot = document.getElementById('selectionRoot');
    const selectionContent = document.getElementById('selectionContent');
    const battleRoot = document.getElementById('battleRoot');
    const p1Emoji = document.getElementById('p1Emoji');
    const p2Emoji = document.getElementById('p2Emoji');
    const p1Name = document.getElementById('p1Name');
    const p2Name = document.getElementById('p2Name');
    const p1Fill = document.getElementById('p1Fill');
    const p2Fill = document.getElementById('p2Fill');
    const p1HP = document.getElementById('p1HP');
    const p2HP = document.getElementById('p2HP');
    const turnLabel = document.getElementById('turnLabel');
    const turnEmoji = document.getElementById('turnEmoji');
    const movesGrid = document.getElementById('movesGrid');
    const logEl = document.getElementById('log');
    const endBox = document.getElementById('endBox');
    const resetBtn = document.getElementById('resetBtn');
    const newGameBtn = document.getElementById('newGameBtn');

    // --- selection UI setup ---
    function renderSelection(){
      // selectionContent is a panel area - we'll inject UI
      selectionContent.innerHTML = '';
      const frag = document.createElement('div');
      frag.innerHTML = `
        <div style="display:flex;gap:12px;align-items:center;justify-content:space-between;flex-wrap:wrap">
          <div style="flex:1;min-width:260px">
            <div style="font-weight:600;margin-bottom:8px">Player 1 ‚Äî Choose a team</div>
            <div class="select-grid" id="p1Choices"></div>
          </div>
          <div style="flex:1;min-width:260px">
            <div style="font-weight:600;margin-bottom:8px">Player 2 ‚Äî Choose a team</div>
            <div class="select-grid" id="p2Choices"></div>
          </div>
        </div>
        <div style="margin-top:12px;text-align:center" id="startArea"></div>
      `;
      selectionContent.appendChild(frag);

      const p1Choices = document.getElementById('p1Choices');
      const p2Choices = document.getElementById('p2Choices');
      const startArea = document.getElementById('startArea');

      // create choice cards for both players
      ['penguin','bear'].forEach(team => {
        const c1 = document.createElement('div');
        c1.className = 'team-card';
        c1.innerHTML = `<div class="team-emoji">${emojiFor(team==='penguin'?TEAMS.PENGUIN:TEAMS.BEAR)}</div><div style="font-weight:600">${team==='penguin'?'Penguin':'Polar Bear'}</div>`;
        c1.onclick = () => {
          P1 = JSON.parse(JSON.stringify(CHARACTERS[team]));
          renderSelection(); // rerender to reflect selection
        };
        if (P1 && P1.id === CHARACTERS[team].id) c1.style.boxShadow = '0 6px 18px rgba(59,130,246,0.12)';
        p1Choices.appendChild(c1);

        const c2 = document.createElement('div');
        c2.className = 'team-card';
        c2.innerHTML = `<div class="team-emoji">${emojiFor(team==='penguin'?TEAMS.PENGUIN:TEAMS.BEAR)}</div><div style="font-weight:600">${team==='penguin'?'Penguin':'Polar Bear'}</div>`;
        c2.onclick = () => {
          // allow both players choose same species
          P2 = JSON.parse(JSON.stringify(CHARACTERS[team]));
          renderSelection();
        };
        if (P2 && P2.id === CHARACTERS[team].id) c2.style.boxShadow = '0 6px 18px rgba(59,130,246,0.12)';
        p2Choices.appendChild(c2);
      });

      // start button
      startArea.innerHTML = '';
      const startBtn = document.createElement('button');
      startBtn.className = 'btn';
      startBtn.textContent = 'Start Battle';
      startBtn.onclick = () => {
        if (!P1 || !P2){ alert('Both players must pick a character.'); return; }
        battleStarted = true;
        turn = TEAMS.PENGUIN;
        history = [];
        updateBattleUI();
        selectionRoot.style.display = 'none';
        battleRoot.style.display = '';
        endBox.innerHTML = '';
      };
      if (!P1 || !P2) startBtn.disabled = true;
      startArea.appendChild(startBtn);

      // show current selections summary
      const summary = document.createElement('div');
      summary.className = 'small muted';
      summary.style.marginTop = '8px';
      summary.textContent = `Selected: Player1=${P1?P1.name:'‚Äî'} , Player2=${P2?P2.name:'‚Äî'}`;
      startArea.appendChild(summary);
    }

    // --- battle UI updates ---
    function updateBattleUI(){
      // header / HP
      p1Emoji.textContent = emojiFor(P1.team);
      p2Emoji.textContent = emojiFor(P2.team);
      p1Name.textContent = 'Player 1';
      p2Name.textContent = 'Player 2';
      p1Fill.style.width = ((P1.hp / MAX_HP) * 100) + '%';
      p2Fill.style.width = ((P2.hp / MAX_HP) * 100) + '%';
      p1HP.textContent = `${P1.hp}/${MAX_HP}`;
      p2HP.textContent = `${P2.hp}/${MAX_HP}`;

      turnLabel.textContent = (turn === TEAMS.PENGUIN ? 'Penguin' : 'Polar Bear') + "'s Turn";
      turnEmoji.textContent = emojiFor(turn);

      // moves for current active player
      movesGrid.innerHTML = '';
      const moves = (turn === TEAMS.PENGUIN ? P1.moves : P2.moves);
      moves.forEach(mv=>{
        const btn = document.createElement('button');
        btn.className = 'move-btn';
        btn.innerHTML = `<span><span class="move-icon">${mv.symbol}</span> <strong>${mv.name}</strong></span><span class="small">${mv.power >= 0 ? mv.power : 'heal ' + Math.abs(mv.power)}</span>`;
        btn.onclick = () => {
          if (isBattleOver()) return;
          performMove(mv);
        };
        movesGrid.appendChild(btn);
      });

      renderLog();
      renderWinnerIfAny();
    }

    function log(msg){
      history.unshift(msg);
      renderLog();
    }

    function renderLog(){
      logEl.innerHTML = '';
      history.slice(0,200).forEach(it=>{
        const d = document.createElement('div');
        d.className = 'log-item';
        d.textContent = it;
        logEl.appendChild(d);
      });
    }

    function isBattleOver(){
      return (P1.hp <= 0 || P2.hp <= 0);
    }

    // perform move logic (critical, elemental adv, reaction)
    function performMove(move){
      const isCrit = rndChance(CRIT_CHANCE);
      let damage = isCrit ? move.power * 2 : move.power;
      const attacker = (turn === TEAMS.PENGUIN) ? P1 : P2;
      const defender = (turn === TEAMS.PENGUIN) ? P2 : P1;

      let msg = `${attacker.name} ${move.symbol} used ${move.name}!`;

      if (move.power > 0){
        // pick a random defender move to simulate defender element context (keeps simple)
        const randomDefMove = defender.moves[Math.floor(Math.random()*defender.moves.length)];

        // elemental advantage
        if (ELEMENT_ADVANTAGE(move.element, randomDefMove.element)){
          damage = Math.round(damage * 1.5);
          msg += ' üåü Elemental Advantage!';
        } else {
          damage = Math.round(damage);
        }

        // apply damage (clamp)
        defender.hp = Math.max(0, defender.hp - damage);

        if (isCrit) msg += ` üí• Critical Hit! (${damage} dmg)`;
      } else {
        // heal
        const heal = Math.abs(Math.round(move.power));
        attacker.hp = Math.min(MAX_HP, attacker.hp + heal);
        msg += ` ‚ú® Healed ${heal} HP!`;
      }

      // reaction check (extra effect)
      const reaction = getReaction(move.element, defender.moves[Math.floor(Math.random()*defender.moves.length)].element);
      if (reaction){
        msg += ' ‚öóÔ∏è ' + reaction;
        // small extra damage for reaction
        defender.hp = Math.max(0, defender.hp - Math.round(2 * DAMAGE_SCALE));
      }

      log(msg);

      // commit updated objects (they're references)
      updateBattleUI();

      // check end
      if (isBattleOver()){
        setTimeout(()=> showEnd(), 300);
        return;
      }

      // switch turn
      turn = (turn === TEAMS.PENGUIN) ? TEAMS.BEAR : TEAMS.PENGUIN;
      updateBattleUI();
    }

    function ELEMENT_ADVANTAGE(e1,e2){
      if (!e1 || !e2) return false;
      return ELEMENT_ADV[e1] === e2;
    }

    function showEnd(){
      const winner = determineWinnerName();
      endBox.innerHTML = '';
      const w = document.createElement('div');
      w.className = 'winner';
      w.textContent = `üèÜ ${winner} wins!`;
      endBox.appendChild(w);
    }

    function determineWinnerName(){
      // if both alive -> none
      if (P1.hp > 0 && P2.hp > 0) return null;
      if (P1.hp <= 0 && P2.hp <= 0) return 'Draw';
      // whichever has hp > 0 wins. Show "Player 1" or "Player 2"
      if (P1.hp > 0) return 'Player 1';
      if (P2.hp > 0) return 'Player 2';
      return null;
    }

    // wire reset/back buttons
    resetBtn.onclick = ()=>{
      selectionRoot.style.display = '';
      battleRoot.style.display = 'none';
      // keep choices but let players pick again ‚Äî or fully reset?
      // We'll bring them back to selection and keep their picks (so they can switch)
      renderSelection();
    };
    newGameBtn.onclick = ()=>{
      // full reset match but keep selected characters
      if (P1) P1.hp = MAX_HP;
      if (P2) P2.hp = MAX_HP;
      history = [];
      turn = TEAMS.PENGUIN;
      endBox.innerHTML = '';
      updateBattleUI();
    };

    // helpers wiring above constants to names
    function ELEMENT_ADV(e){ return ELEMENT_ADV_MAP[e]; }
    // create an inner mapping for quick check
    const ELEMENT_ADV_MAP = (function(){ const map = {}; Object.keys(ELEMENT_ADV).forEach(k=>map[k]=ELEMENT_ADV[k]); return map; })();

    // initial render
    renderSelection();

  })();
  </script>
</body>
</html>
