import React, { useState } from "react"; import { motion } from "framer-motion";// --- Types --- const MAX_HP = 100;const TEAMS = { PENGUIN: "penguin", BEAR: "bear", } as const;type Team = typeof TEAMS[keyof typeof TEAMS];type Move = { name: string; power: number; type: string; icon: string; special?: "heal" |"defend"; };type Unit = { id: string; team: Team; hp: number; name: string; moves: Move[]; defense:number; };// --- Helpers --- function teamName(team: Team) { return team === TEAMS.PENGUIN ?"Penguins" : "Polar Bears"; }function teamEmoji(team: Team) { return team === TEAMS.PENGUIN ? " " : " "; }// --- Reaction System --- const REACTIONS: Record<string, { against: string; effect: string;bonus: number }[]> = { Ice: [ { against: "Water", effect: "Frozen Armor! Reduced nextdamage.", bonus: -3 }, ], Water: [ { against: "Fire", effect: "Steam Cloud! Opponent losesfocus.", bonus: 5 }, ], Claw: [ { against: "Ice", effect: "Shattered Ice! Double damage.",bonus: 3 }, ], Snow: [ { against: "Water", effect: "Slush Mix! Normal damage boosted.",bonus: 4 }, ], };function checkReaction(attackerMove: Move, defenderMove: Move | null) { if(!defenderMove) return null; const list = REACTIONS[attackerMove.type]; if (!list) returnnull; const reaction = list.find(r => r.against === defenderMove.type); return reaction ||null; }// --- Main Component --- export default function PenguinsVsPolarBears() { const [units,setUnits] = useState<Unit[]>([ { id: "P1", team: TEAMS.PENGUIN, hp: MAX_HP, name:"Pengu", defense: 0, moves: [ { name: "Ice Peck", power: 6, type: "Ice", icon: " " }, { name:"Snowball Toss", power: 9, type: "Snow", icon: " " }, { name: "Frost Heal", power: -5, type:"Ice", icon: " ", special: "heal" }, { name: "Slide Guard", power: 0, type: "Ice", icon: " ",special: "defend" }, ], }, { id: "B1", team: TEAMS.BEAR, hp: MAX_HP, name: "Frostpaw",defense: 0, moves: [ { name: "Claw Swipe", power: 5, type: "Claw", icon: " " }, { name:"Blizzard Roar", power: 10, type: "Ice", icon: " " }, { name: "Hibernate", power: -5, type:
"Water", icon: " ", special: "heal" }, { name: "Thick Fur", power: 0, type: "Snow", icon:" ", special: "defend" }, ], }, ]);const [turn, setTurn] = useState(TEAMS.PENGUIN); const [history, setHistory] =useState<string[]>([]); const [lastMoves, setLastMoves] = useState<{ [team in Team]?:Move }>({});const penguin = units.find(u => u.team === TEAMS.PENGUIN)!; const bear = units.find(u =>u.team === TEAMS.BEAR)!; const winner: Team | null = penguin.hp <= 0 ? TEAMS.BEAR :bear.hp <= 0 ? TEAMS.PENGUIN : null;function reset() { setUnits([ { id: "P1", team: TEAMS.PENGUIN, hp: MAX_HP, name: "Pengu",defense: 0, moves: [ { name: "Ice Peck", power: 6, type: "Ice", icon: " " }, { name:"Snowball Toss", power: 9, type: "Snow", icon: " " }, { name: "Frost Heal", power: -5, type:"Ice", icon: " ", special: "heal" }, { name: "Slide Guard", power: 0, type: "Ice", icon: " ",special: "defend" }, ] }, { id: "B1", team: TEAMS.BEAR, hp: MAX_HP, name: "Frostpaw",defense: 0, moves: [ { name: "Claw Swipe", power: 5, type: "Claw", icon: " " }, { name:"Blizzard Roar", power: 10, type: "Ice", icon: " " }, { name: "Hibernate", power: -5, type:"Water", icon: " ", special: "heal" }, { name: "Thick Fur", power: 0, type: "Snow", icon:" ", special: "defend" }, ] }, ]); setTurn(TEAMS.PENGUIN); setHistory([]);setLastMoves({}); }function performMove(move: Move) { if (winner) return;const attacker = units.find(u => u.team === turn)!;const defender = units.find(u => u.team !== turn)!;let log = `${attacker.name} ${teamEmoji(attacker.team)} used${move.icon} ${move.name}!`;setUnits(prev => {const next = [...prev];const atk = next.find(u => u.team === turn)!;const def = next.find(u => u.team !== turn)!;if (move.special === "heal") {atk.hp = Math.min(MAX_HP, atk.hp - move.power);log += ` ${atk.name} healed! `;} else if (move.special === "defend") {
atk.defense = 2;log += ` ${atk.name} raised defense! `;} else {let dmg = move.power - def.defense;def.defense = 0;// critical hit chanceif (Math.random() < 0.01) {dmg *= 2;log += " Critical hit! ";}// check reactionsconst reaction = checkReaction(move, lastMoves[def.team] || null);if (reaction) {dmg += reaction.bonus;log += ` Reaction: ${reaction.effect} `;}def.hp = Math.max(0, def.hp - Math.max(0, dmg));}return next;});setHistory(h => [log, ...h]);setLastMoves(prev => ({ ...prev, [turn]: move }));setTurn(t => (t === TEAMS.PENGUIN ? TEAMS.BEAR : TEAMS.PENGUIN));}return ({/* Header */}Penguins vs Polar BearsA Pokémon-style turn-based duel with reactions.
New Game{/* Battle UI */}<div className="bg-white rounded-3xl shadow-lg p-6 grid grid-rows-2 gap-6">{/* Opponent */}<div className="flex justify-between items-center"><div className="flex flex-col items-start"><span className="font-semibold">{bear.name}{teamEmoji(bear.team)}</span><div className="w-40 h-3 bg-slate-200 rounded-full overflow-hidden"><motion.div className="h-full bg-red-500"initial={{ width: "100%" }} animate={{ width: `${(bear.hp / MAX_HP) *100}%` }} /></div><span className="text-xs text-slate-500">HP:{bear.hp}/{MAX_HP}</span></div><motion.div className="text-6xl" animate={{ scale: bear.hp >0 ? 1 : 0.5, opacity: bear.hp > 0 ? 1 :0.5 }}>{teamEmoji(bear.team)}</motion.div></div>{/* Player */}<div className="flex justify-between items-center"><motion.div className="text-6xl" animate={{ scale: penguin.hp> 0 ? 1 : 0.5, opacity: penguin.hp > 0 ? 1 :0.5 }}>{teamEmoji(penguin.team)}</motion.div><div className="flex flex-col items-end"><span className="font-semibold">{penguin.name}{teamEmoji(penguin.team)}</span><div className="w-40 h-3 bg-slate-200 rounded-full overflow-hidden"><motion.div className="h-full bg-red-500"initial={{ width: "100%" }} animate={{ width: `${(penguin.hp / MAX_HP)* 100}%` }} /></div><span className="text-xs text-slate-500">HP:{penguin.hp}/{MAX_HP}</span>
</div></div></div>{/* Moves */}{!winner ? (<div className="bg-white rounded-3xl shadow-lg p-6"><h3 className="font-semibold mb-2">{teamName(turn)}'s Turn{teamEmoji(turn)}</h3><div className="grid grid-cols-2 gap-2">{units.find(u => u.team === turn)?.moves.map(move => (<buttonkey={move.name}onClick={() => performMove(move)}className="px-3 py-2 rounded-xl shadow bg-blue-100hover:bg-blue-200 text-sm font-medium flex items-center gap-2"><span>{move.icon}</span> {move.name} <spanclassName="text-xs text-slate-500">({move.power >= 0 ? move.power :`heal ${-move.power}`})</span></button>))}</div></div>) : (<div className="bg-yellow-200 text-yellow-900 rounded-3xlshadow-lg p-6 text-center font-bold">{teamName(winner)} win!</div>)}{/* Battle Log */}<div className="bg-white rounded-2xl shadow p-4"><h3 className="font-semibold mb-2">Battle Log</h3><div className="h-48 overflow-auto space-y-2">{history.length === 0 ? (<p className="text-sm text-slate-500">No actions yet. Makethe first move!</p>) : (
history.map((h, i) => (<motion.div key={i} className="text-sm p-2 rounded-lg bg-slate-50 border border-slate-100" initial={{ opacity: 0, y: 5 }}animate={{ opacity: 1, y: 0 }}>{h}</motion.div>)))}</div></div>{/* Reaction Guide */}<div className="bg-blue-50 rounded-2xl shadow p-4"><h3 className="font-semibold mb-2">Reaction Guide</h3><ul className="text-sm space-y-1"><li> Ice + Water → Frozen Armor (reduce nextdamage)</li><li> Water + Fire → Steam Cloud (bonus distractiondamage)</li><li> Claw + Ice → Shattered Ice (double damage)</li><li> Snow + Water → Slush Mix (extra damage)</li></ul></div></div><footer className="mt-8 text-center text-xs text-slate-500">Built with React + Tailwind. Pokémon-style battle mechanics withcritical hits, chemical reactions, and visual effects.</footer></div>); }
